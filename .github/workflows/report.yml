name: Postman Test and Allure Report

on:
  push:
    branches:
      - organization
  schedule:
    - cron: '30 18 * * 3' # Runs every Wednesday at 7:30pm
    - cron: '30 18 * * 5' # Runs every Friday at 7:30pm
    - cron: '0 20 * * 0' # Runs every Sunday at 8:00pm

jobs:
  run_tests:
    if: github.event_name == 'schedule' || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get current latest folder in gh-pages
        id: get_current_latest
        run: |
          git fetch origin gh-pages:gh-pages
          mkdir -p gh-pages
          git clone --depth 1 --branch gh-pages https://github.com/${{ github.repository }} gh-pages
          current_latest=$(find gh-pages -mindepth 1 -maxdepth 1 -type d -name '[0-9]*' | sort -n | tail -n 1)
          current_latest_number=$(basename $current_latest)
          echo "Current Latest Folder Number: $current_latest_number"
          echo "::set-output name=current_latest_number::$current_latest_number"

      - name: Install newman and newman-reporter-allure
        run: |
          npm install -g newman newman-reporter-allure
          echo "Newman and newman-reporter-allure installed."

      - name: Run Postman tests
        if: always()
        continue-on-error: true
        run: |
          newman run Postman-Collections/Postman-Collections.json --reporters cli,allure
          echo "Postman tests run."

      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Copy existing content to allure-history
        run: |
          mkdir -p allure-history
          if [ -d gh-pages ]; then
            cp -r gh-pages/* allure-history/
          fi

      - name: Allure report action
        id: build
        uses: simple-elf/allure-report-action@master
        if: always()
        continue-on-error: true
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      - name: Deploy report to GitHub Pages
        id: deploy
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history

      - name: Wait for Allure report to be generated
        if: always()
        continue-on-error: true
        run: sleep 30

      - name: Find new folder in gh-pages
        id: new_folder
        run: |
          new_folder=$(find gh-pages -mindepth 1 -maxdepth 1 -type d -name '[0-9]*' | sort -n | tail -n 1)
          new_folder_number=$(basename $new_folder)
          new_folder_number=$((new_folder_number + 1))
          mkdir -p gh-pages/$new_folder_number
          echo "New Folder Number: $new_folder_number"
          echo "::set-output name=new_folder_number::$new_folder_number"

      - name: Verify new folder exists
        run: |
          new_folder_number=${{ steps.new_folder.outputs.new_folder_number }}
          if [ -d "gh-pages/$new_folder_number" ]; then
            echo "New folder gh-pages/$new_folder_number created successfully."
          else
            echo "Error: New folder gh-pages/$new_folder_number was not created."
            exit 1
          fi

      - name: Copy Allure report to new and previous folder
        run: |
          new_folder_number=${{ steps.new_folder.outputs.new_folder_number }}
          current_latest_number=${{ steps.get_current_latest.outputs.current_latest_number }}
          cp -r allure-report/* gh-pages/$new_folder_number/
          cp -r allure-report/* gh-pages/$current_latest_number/
          echo "Allure report copied to gh-pages/$new_folder_number and gh-pages/$current_latest_number"

      - name: Update Allure Report Widget Title in new folder
        continue-on-error: true
        run: |
          new_folder_number=${{ steps.new_folder.outputs.new_folder_number }}
          summary_path="gh-pages/$new_folder_number/widgets/summary.json"
          echo "Summary Path: $summary_path"
          if [[ -e "$summary_path" ]]; then
            cat "$summary_path"  # Print content before
            sed -i 's/Allure Report/Organization - API Quality Readiness/' "$summary_path"
            cat "$summary_path"  # Print content after
          else
            echo "Error: summary.json not found in the new folder."
            exit 1
          fi

      - name: Parse new summary.json
        id: parse_new_json
        run: |
          current_latest_number=${{ steps.get_current_latest.outputs.current_latest_number }}
          new_summary_path="gh-pages/${current_latest_number}/widgets/summary.json"
          echo "New Summary Path: $new_summary_path"
          if [ -f "$new_summary_path" ]; then
            cat "$new_summary_path"
            passed_tests=$(jq -r '.statistic.passed' "$new_summary_path")
            failed_tests=$(jq -r '.statistic.failed' "$new_summary_path")
            total_tests=$((passed_tests + failed_tests))
            if [ "$total_tests" -gt 0 ]; then
              passing_percentage=$(( passed_tests * 100 / total_tests ))
              failing_percentage=$(( failed_tests * 100 / total_tests ))
            else
              passing_percentage=0
              failing_percentage=0
            fi
            echo "Passed Tests: $passed_tests"
            echo "Failed Tests: $failed_tests"
            echo "Passing Percentage: $passing_percentage%"
            echo "Failing Percentage: $failing_percentage%"
            echo "::set-output name=passing_percentage::$passing_percentage"
            echo "::set-output name=failing_percentage::$failing_percentage"
            echo "::set-output name=passed_tests::$passed_tests"
            echo "::set-output name=failed_tests::$failed_tests"
          else
            echo "summary.json not found"
            echo "::set-output name=passing_percentage::0"
            echo "::set-output name=failing_percentage::0"
            echo "::set-output name=passed_tests::0"
            echo "::set-output name=failed_tests::0"
          fi
        
        
      # - name: Notify Slack
      #   if: always()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: 'C070KUKPDLZ'
      #     SLACK_MESSAGE: |
      #       *Eatcheffie Vendor - API Quality Readiness*
      #       *Contributors - Azeez*
      #       Status: ${{ job.status }}
      #       Passing Tests: ${{ steps.parse_new_json.outputs.passing_percentage }}%
      #       Failing Tests: ${{ steps.parse_new_json.outputs.failing_percentage }}%
      #       Total Passed: ${{ steps.parse_new_json.outputs.passed_tests }}
      #       Total Failed: ${{ steps.parse_new_json.outputs.failed_tests }}
      #       GitHub Pages URL: ${{ secrets.PAGES_URL }}/${{ steps.new_folder.outputs.new_folder_number }}
